#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// Layers
#define BASE 0
#define NAV_NUM 1
#define FUNCTION 2

// use global-quick-tap-ms for combos (requires PR 1387)
#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <100>;

&sk {
    quick-release;
    release-after-ms = <10000>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BACKSPACE DEL>;
    /delete-property/ ignore-modifiers;
};

&num_word {
    layers = <NAV_NUM>;
    ignore-modifiers;
};

// Key positions
// - first Letter is the hand: (L)eft or (R)ight
// - second letter is the finger (P)inky; (R)ing; (M)iddle; (I)ndex; (T)humb
// - third letter is either
//      - the column for the thumb finger (O)uter; (H)ome; (I)nner
//      - the row for all the other fingers (U)pper; (H)ome; (L)ower
// - for the index fingers, the (I)nner column with another 'I' at the end
//  ╭──────────────────────────────────────────────╮ ╭──────────────────────────────────────────────╮
//  │ LPU (0)  LRU (1)  LMU (2)  LIU (3)  LIUI (4) │ │ RIUI (5)  RIU (6)  RMU (7)  RRU (8)  RPU (9) │
//  │ LPH(10)  LRH(11)  LMH(12)  LIH(13)  LIHI(14) │ │ RIHI(15)  RIH(16)  RMH(17)  RRH(18)  RPH(19) │
//  │ LPL(20)  LRL(21)  LML(22)  LIL(23)  LILI(24) │ │ RILI(25)  RIL(26)  RML(27)  RRL(28)  RPL(29) │
//  ╰─────────────────╮ LTO(30)  LTH(31)  LTI (32) │ │ RTI (33)  RTH(34)  RTO(35) ╭─────────────────╯
//                    ╰────────────────────────────╯ ╰────────────────────────────╯

// left pinky finger
#define LPU 0
#define LPH 10
#define LPL 20

// left ring finger
#define LRU 1
#define LRH 11
#define LRL 21

// left middle finger
#define LMU 2
#define LMH 12
#define LML 22

// left index finger
#define LIU 3
#define LIH 13
#define LIL 23
#define LIUI 4
#define LIHI 14
#define LILI 24

// left thumb
#define LTO 30
#define LTH 31
#define LTI 32

// right pinky finger
#define RPU 9
#define RPH 19
#define RPL 29

// right ring finger
#define RRU 8
#define RRH 18
#define RRL 28

// right middle finger
#define RMU 7
#define RMH 17
#define RML 27

// right index finger
#define RIU 6
#define RIH 16
#define RIL 26
#define RIUI 5
#define RIHI 15
#define RILI 25

// right thumb
#define RTO 35
#define RTH 34
#define RTI 33

#define L_INDEX_FINGER LIUI LIHI LILI LIU LIH LIL
#define L_MIDDLE_FINGER LMU LMH LML
#define L_RING_FINGER LRU LRH LRL
#define L_PINKY_FINGER LPU LPH LPL
#define L_THUMB LTO LTH LTI

#define R_INDEX_FINGER RIUI RIHI RILI RIU RIH RIL
#define R_MIDDLE_FINGER RMU RMH RML
#define R_RING_FINGER RRU RRH RRL
#define R_PINKY_FINGER RPU RPH RPL
#define R_THUMB RTO RTH RTI

#define COMBO(NAME, LAYERS, KEYPOS, BINDINGS) \
/ { \
    combos { \
        compatible = "zmk,combos"; \
        combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            timeout-ms = <40>; \
        }; \
    }; \
}

#define MOD_MORPH(NAME, MODS, WITHOUT_MODS, WITH_MODS) \
/ { \
    behaviors { \
        NAME##: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = #NAME; \
            #binding-cells = <0>; \
            bindings = <WITHOUT_MODS>, <WITH_MODS>; \
            mods = <(MODS)>; \
        }; \
    }; \
}

#define SHIFTED(NAME, WITHOUT_SHIFT, WITH_SHIFT) \
MOD_MORPH(NAME, MOD_LSFT|MOD_RSFT, WITHOUT_SHIFT, WITH_SHIFT)

#define MACRO(NAME, ...) \
/ { \
    macros { \
        NAME##: NAME { \
            label = #NAME; \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings = __VA_ARGS__; \
        }; \
    }; \
}

#define HOLD_TAP(NAME, HOLD_BINDING, TAP_BINDING) \
/ { \
    behaviors { \
        NAME##: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = #NAME; \
            #binding-cells = <2>; \
            flavor = "tap-preferred"; \
            tapping-term-ms = <200>; \
            bindings = <HOLD_BINDING>, <TAP_BINDING>; \
        }; \
    }; \
}

#define BIGRAM(NAME, FIRST_LETTER, SECOND_LETTER) \
MACRO(NAME ## _lowercase, <&macro_tap &kp FIRST_LETTER &kp SECOND_LETTER>); \
MACRO(NAME ## _sentence_case, <&macro_tap &kp LS(FIRST_LETTER) &kp SECOND_LETTER>); \
SHIFTED(NAME, & ## NAME ## _lowercase, & ## NAME ## _sentence_case)

#define AUTOPAIR(NAME, OPENING_SYMBOL, CLOSING_SYMBOL) \
MACRO(NAME ## _ap, <&macro_tap &kp OPENING_SYMBOL &kp CLOSING_SYMBOL &kp LEFT>); \
MACRO(NAME ## _ap_space, <&macro_tap &kp OPENING_SYMBOL &kp SPACE &kp SPACE &kp CLOSING_SYMBOL &kp LEFT &kp LEFT>); \
MACRO(NAME ## _ap_enter, <&macro_tap &kp OPENING_SYMBOL &kp RET &kp RET &kp CLOSING_SYMBOL &kp UP>); \
SHIFTED(NAME ## _shifted, & ## NAME ## _ap, & ## NAME ## _ap_space); \
MOD_MORPH(NAME, MOD_LCTL|MOD_RCTL, & ## NAME ## _shifted, & ## NAME ## _ap_enter)

#define AUTOPAIR_HOLD_TAP(NAME, OPENING_SYMBOL, CLOSING_SYMBOL, TAP_BEHAVIOR) \
AUTOPAIR(NAME, OPENING_SYMBOL, CLOSING_SYMBOL); \
HOLD_TAP(NAME ## _ht, & ## NAME, TAP_BEHAVIOR)

#define SENTENCE_CASE_HOLD_TAP(NAME, SENTENCE_ENDING_SYMBOL, TAP_BEHAVIOR) \
MACRO(NAME ## _sc, <&macro_tap &kp SENTENCE_ENDING_SYMBOL &kp SPACE &sk LSHIFT>); \
HOLD_TAP(NAME ## _sc_ht, & ## NAME ## _sc, TAP_BEHAVIOR)

SHIFTED(symbols_RPU, &kp SINGLE_QUOTE, &kp DOLLAR);

SHIFTED(symbols_RRU, &kp DOUBLE_QUOTES, &kp HASH);

AUTOPAIR_HOLD_TAP(auto_single_quotes, SINGLE_QUOTE, SINGLE_QUOTE, &symbols_RPU);
AUTOPAIR_HOLD_TAP(auto_double_quotes, DOUBLE_QUOTES, DOUBLE_QUOTES, &symbols_RRU);


SHIFTED(symbols_RMU, &kp SLASH, &kp ASTERISK);
SHIFTED(symbols_RIU, &kp PERIOD, &kp AMPERSAND);
SHIFTED(symbols_RIUI, &kp SEMICOLON, &kp COLON);
SHIFTED(symbols_RIHI, &kp COMMA, &kp PIPE);
SHIFTED(symbols_RILI, &kp MINUS, &kp PLUS);

SENTENCE_CASE_HOLD_TAP(period, PERIOD, &symbols_RIU);

SHIFTED(bspc_del, &kp BSPC, &kp DEL);

COMBO(z, BASE, LPU LRU, &kp Z);

BIGRAM(qu, Q, U);
COMBO(qu, BASE, LPH LRH, &qu);
COMBO(q, BASE, LPL LRL, &kp Q);

BIGRAM(th, T, H);
COMBO(th, BASE, LIH LMH, &th);

BIGRAM(ch, C, H);
COMBO(ch, BASE, LIL LML, &ch);

BIGRAM(sh, S, H);
COMBO(sh, BASE, LRH LMH, &sh);

BIGRAM(wh, W, H);
COMBO(wh, BASE, LRL LML, &wh);

BIGRAM(gh, G, H);
COMBO(gh, BASE, LRU LMU, &gh);

BIGRAM(ph, P, H);
COMBO(ph, BASE, LMU LIU, &ph);

COMBO(caps_word, BASE, LIH RIH, &caps_word);

SHIFTED(round_brackets, &kp LPAR, &kp RPAR);
SHIFTED(angled_brackets, &kp LESS_THAN, &kp GREATER_THAN);
SHIFTED(curly_brackets, &kp LEFT_BRACE, &kp RIGHT_BRACE);
SHIFTED(square_brackets, &kp LEFT_BRACKET, &kp RIGHT_BRACKET);

AUTOPAIR_HOLD_TAP(auto_round_brackets, LPAR, RPAR, &round_brackets);
AUTOPAIR_HOLD_TAP(auto_angled_brackets, LESS_THAN, GREATER_THAN, &angled_brackets);
AUTOPAIR_HOLD_TAP(auto_curly_brackets, LEFT_BRACE, RIGHT_BRACE, &curly_brackets);
AUTOPAIR_HOLD_TAP(auto_square_brackets, LEFT_BRACKET, RIGHT_BRACKET, &square_brackets);

COMBO(round_brackets, BASE, RIH RMH, &auto_round_brackets_ht 0 0);
COMBO(angled_brackets, BASE, RIL RML, &auto_angled_brackets_ht 0 0);
COMBO(curly_brackets, BASE, RMH RRH, &auto_curly_brackets_ht 0 0);
COMBO(square_brackets, BASE, RML RRL, &auto_square_brackets_ht 0 0);

AUTOPAIR_HOLD_TAP(auto_back_tick, GRAVE, GRAVE, &kp);
COMBO(backtick_tilde, BASE, RRU RPU, &auto_back_tick_ht 0 GRAVE);

SHIFTED(equal_percent, &kp EQUAL, &kp PERCENT);
COMBO(equal_percent, BASE, RMU RRU, &equal_percent);

SHIFTED(underscore_backslash, &kp UNDERSCORE, &kp BACKSLASH);
COMBO(underscore_backslash, BASE, RIU RMU, &underscore_backslash);

SHIFTED(exclamation_at, &kp EXCLAMATION, &kp AT_SIGN);
SENTENCE_CASE_HOLD_TAP(exclamation, EXCLAMATION, &exclamation_at);
COMBO(exclamation_at, BASE, RRH RPH, &exclamation_sc_ht 0 0);

SHIFTED(question_caret, &kp QUESTION, &kp CARET);
SENTENCE_CASE_HOLD_TAP(question, QUESTION, &question_caret);
COMBO(question_caret, BASE, RRL RPL, &question_sc_ht 0 0);

COMBO(num_word, BASE, LTH RTH, &num_word);

COMBO(oneshot_fn_layer, BASE, LPU LRU LMU LIU, &sl FUNCTION);

// experimental numbers on base layer using combos
COMBO(vertical_0, BASE, RIUI RIHI, &kp N0);
COMBO(vertical_2, BASE, RIU  RIH,  &kp N2);
COMBO(vertical_4, BASE, RMU  RMH,  &kp N4);
COMBO(vertical_6, BASE, RRU  RRH,  &kp N6);
COMBO(vertical_8, BASE, RIL  RIH,  &kp N8);


COMBO(vertical_1, BASE, LIUI LIHI, &kp N1);
COMBO(vertical_3, BASE, LIU  LIH,  &kp N3);
COMBO(vertical_5, BASE, LMU  LMH,  &kp N5);
COMBO(vertical_7, BASE, LRU  LRH,  &kp N7);
COMBO(vertical_9, BASE, LIL  LIH,  &kp N9);

/ {
    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "lmt";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <R_INDEX_FINGER R_MIDDLE_FINGER R_RING_FINGER R_PINKY_FINGER R_THUMB>;
            hold-trigger-on-release;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "rmt";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <L_INDEX_FINGER L_MIDDLE_FINGER L_RING_FINGER L_PINKY_FINGER L_THUMB>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        BASE_layer {
            label = "BASE";
            bindings = <
//    ┌──────────────┬─────────────┬──────────────┬───────────────┬───────────────┐           ┌───────────────────┬───────────────────┬──────────────┬────────────────────────────┬────────────────────────────┐
//    │      J       │      G      │      M       │       P       │       V       │           │   &symbols_RIUI   │ &period_sc_ht 0 0 │ &symbols_RMU │ &auto_double_quotes_ht 0 0 │ &auto_single_quotes_ht 0 0 │
//    ├──────────────┼─────────────┼──────────────┼───────────────┼───────────────┤           ├───────────────────┼───────────────────┼──────────────┼────────────────────────────┼────────────────────────────┤
//    │ &lmt LMETA R │ &lmt LALT S │ &lmt LCTRL N │ &lmt LSHIFT D │       B       │           │   &symbols_RIHI   │   &rmt RSHIFT A   │ &rmt RCTRL E │        &rmt RALT I         │        &rmt RMETA H        │
//    ├──────────────┼─────────────┼──────────────┼───────────────┼───────────────┤           ├───────────────────┼───────────────────┼──────────────┼────────────────────────────┼────────────────────────────┤
//    │      X       │      F      │      L       │       C       │       W       │           │   &symbols_RILI   │         U         │      O       │             Y              │             K              │
//    └──────────────┴─────────────┴──────────────┼───────────────┼───────────────┼───┐   ┌───┼───────────────────┼───────────────────┼──────────────┴────────────────────────────┴────────────────────────────┘
//                                                │   &bspc_del   │ &lt NAV_NUM T │ ⭾ │   │ ⏎ │ &lt NAV_NUM SPACE │        Esc        │                                                                         
//                                                └───────────────┴───────────────┴───┘   └───┴───────────────────┴───────────────────┘                                                                         
  &kp J          &kp G         &kp M          &kp P           &kp V                                   &symbols_RIUI       &period_sc_ht 0 0   &symbols_RMU   &auto_double_quotes_ht 0 0   &auto_single_quotes_ht 0 0
  &lmt LMETA R   &lmt LALT S   &lmt LCTRL N   &lmt LSHIFT D   &kp B                                   &symbols_RIHI       &rmt RSHIFT A       &rmt RCTRL E   &rmt RALT I                  &rmt RMETA H              
  &kp X          &kp F         &kp L          &kp C           &kp W                                   &symbols_RILI       &kp U               &kp O          &kp Y                        &kp K                     
                                              &bspc_del       &lt NAV_NUM T   &kp TAB       &kp RET   &lt NAV_NUM SPACE   &kp ESC                                                                                   
            >;
        };

        NAV_NUM_layer {
            label = "NAV/NUM";
            bindings = <
//    ┌───┬───────────────┬──────────┬─────────────┬───┐           ┌────────┬────────────────┬───────────────┬──────────────┬───────────┐
//    │   │ &kp PAGE_DOWN │  &kp UP  │ &kp PAGE_UP │   │           │        │     &kp N7     │    &kp N8     │    &kp N9    │           │
//    ├───┼───────────────┼──────────┼─────────────┼───┤           ├────────┼────────────────┼───────────────┼──────────────┼───────────┤
//    │   │   &kp LEFT    │ &kp DOWN │  &kp RIGHT  │   │           │ &kp N0 │ &rmt RSHIFT N4 │ &rmt RCTRL N5 │ &rmt RALT N6 │ &kp RMETA │
//    ├───┼───────────────┼──────────┼─────────────┼───┤           ├────────┼────────────────┼───────────────┼──────────────┼───────────┤
//    │   │   &kp HOME    │          │   &kp END   │   │           │        │     &kp N1     │    &kp N2     │    &kp N3    │           │
//    └───┴───────────────┴──────────┼─────────────┼───┼───┐   ┌───┼────────┼────────────────┼───────────────┴──────────────┴───────────┘
//                                   │  &bspc_del  │   │ ⭾ │   │ ⏎ │   ‿    │      Esc       │                                           
//                                   └─────────────┴───┴───┘   └───┴────────┴────────────────┘                                           
  &none   &kp PAGE_DOWN   &kp UP     &kp PAGE_UP   &none                           &none       &kp N7           &kp N8          &kp N9         &none    
  &none   &kp LEFT        &kp DOWN   &kp RIGHT     &none                           &kp N0      &rmt RSHIFT N4   &rmt RCTRL N5   &rmt RALT N6   &kp RMETA
  &none   &kp HOME        &none      &kp END       &none                           &none       &kp N1           &kp N2          &kp N3         &none    
                                     &bspc_del     &none   &kp TAB       &kp RET   &kp SPACE   &kp ESC                                                  
            >;
        };

        FUNCTION_layer {
            label = "FN";
            bindings = <
//    ┌──────────────┬───────────────────┬──────────────────┬──────────────┬──────────────┐           ┌───┬───┬───┬───┬───┐
//    │  &bt BT_CLR  │ &ext_power EP_OFF │ &ext_power EP_ON │ &out OUT_USB │ &out OUT_BLE │           │   │   │   │   │   │
//    ├──────────────┼───────────────────┼──────────────────┼──────────────┼──────────────┤           ├───┼───┼───┼───┼───┤
//    │ &bt BT_SEL 4 │   &bt BT_SEL 3    │   &bt BT_SEL 2   │ &bt BT_SEL 1 │ &bt BT_SEL 0 │           │   │   │   │   │   │
//    ├──────────────┼───────────────────┼──────────────────┼──────────────┼──────────────┤           ├───┼───┼───┼───┼───┤
//    │              │                   │                  │              │              │           │   │   │   │   │   │
//    └──────────────┴───────────────────┴──────────────────┼──────────────┼──────────────┼───┐   ┌───┼───┼───┼───┴───┴───┘
//                                                          │              │              │   │   │   │   │   │            
//                                                          └──────────────┴──────────────┴───┘   └───┴───┴───┘            
  &bt BT_CLR     &ext_power EP_OFF   &ext_power EP_ON   &out OUT_USB   &out OUT_BLE                       &none   &none   &none   &none   &none
  &bt BT_SEL 4   &bt BT_SEL 3        &bt BT_SEL 2       &bt BT_SEL 1   &bt BT_SEL 0                       &none   &none   &none   &none   &none
  &none          &none               &none              &none          &none                              &none   &none   &none   &none   &none
                                                        &none          &none          &none       &none   &none   &none                        
            >;
        };
    };
};
