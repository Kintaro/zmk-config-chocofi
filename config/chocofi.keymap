#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/ext_power.h>

// use global-quick-tap-ms for combos (requires PR 1387)
#undef COMBO_HOOK
#define COMBO_HOOK global-quick-tap-ms = <100>;

// Layers
#define BASE 0
#define SYS 1

// Key positions
// - first Letter is the hand: (L)eft or (R)ight
// - second letter is the finger (P)inky; (R)ing; (M)iddle; (I)ndex; (T)humb
// - third letter is either
//      - the column for the thumb finger (O)uter; (H)ome; (I)nner
//      - the row for all the other fingers (U)pper; (H)ome; (L)ower
// - for the index fingers, the (I)nner column with another 'I' at the end
//  ╭──────────────────────────────────────────────╮ ╭──────────────────────────────────────────────╮
//  │ LPU (0)  LRU (1)  LMU (2)  LIU (3)  LIUI (4) │ │ RIUI (5)  RIU (6)  RMU (7)  RRU (8)  RPU (9) │
//  │ LPH(10)  LRH(11)  LMH(12)  LIH(13)  LIHI(14) │ │ RIHI(15)  RIH(16)  RMH(17)  RRH(18)  RPH(19) │
//  │ LPL(20)  LRL(21)  LML(22)  LIL(23)  LILI(24) │ │ RILI(25)  RIL(26)  RML(27)  RRL(28)  RPL(29) │
//  ╰─────────────────╮ LTO(30)  LTH(31)  LTI (32) │ │ RTI (33)  RTH(34)  RTO(35) ╭─────────────────╯
//                    ╰────────────────────────────╯ ╰────────────────────────────╯

// left pinky finger
#define LPU 0
#define LPH 10
#define LPL 20

// left ring finger
#define LRU 1
#define LRH 11
#define LRL 21

// left middle finger
#define LMU 2
#define LMH 12
#define LML 22

// left index finger
#define LIU 3
#define LIH 13
#define LIL 23
#define LIUI 4
#define LIHI 14
#define LILI 24

// left thumb
#define LTO 30
#define LTH 31
#define LTI 32

// right pinky finger
#define RPU 9
#define RPH 19
#define RPL 29

// right ring finger
#define RRU 8
#define RRH 18
#define RRL 28

// right middle finger
#define RMU 7
#define RMH 17
#define RML 27

// right index finger
#define RIU 6
#define RIH 16
#define RIL 26
#define RIUI 5
#define RIHI 15
#define RILI 25

// right thumb
#define RTO 35
#define RTH 34
#define RTI 33

#define L_INDEX_FINGER LIUI LIHI LILI LIU LIH LIL
#define L_MIDDLE_FINGER LMU LMH LML
#define L_RING_FINGER LRU LRH LRL
#define L_PINKY_FINGER LPU LPH LPL
#define L_THUMB LTO LTH LTI

#define R_INDEX_FINGER RIUI RIHI RILI RIU RIH RIL
#define R_MIDDLE_FINGER RMU RMH RML
#define R_RING_FINGER RRU RRH RRL
#define R_PINKY_FINGER RPU RPH RPL
#define R_THUMB RTO RTH RTI

#define COMBO(NAME, LAYERS, KEYPOS, BINDINGS) \
/ { \
    combos { \
        compatible = "zmk,combos"; \
        combo_##NAME { \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
            timeout-ms = <40>; \
        }; \
    }; \
}

#define SHIFTED(NAME, WITHOUT_SHIFT, WITH_SHIFT) \
/ { \
    behaviors { \
        NAME##: NAME { \
            compatible = "zmk,behavior-mod-morph"; \
            label = #NAME; \
            #binding-cells = <0>; \
            bindings = <WITHOUT_SHIFT>, <WITH_SHIFT>; \
            mods = <(MOD_LSFT|MOD_RSFT)>; \
        }; \
    }; \
}

#define MACRO(NAME, ...) \
/ { \
    macros { \
        NAME##: NAME { \
            label = #NAME; \
            compatible = "zmk,behavior-macro"; \
            #binding-cells = <0>; \
            wait-ms = <0>; \
            tap-ms = <0>; \
            bindings = __VA_ARGS__; \
        }; \
    }; \
}

#define HOLD_TAP(NAME, HOLD_BINDING, TAP_BINDING) \
/ { \
    behaviors { \
        NAME##: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = #NAME; \
            #binding-cells = <2>; \
            flavor = "tap-preferred"; \
            tapping-term-ms = <200>; \
            bindings = <HOLD_BINDING>, <TAP_BINDING>; \
        }; \
    }; \
}

#define BIGRAM(NAME, FIRST_LETTER, SECOND_LETTER) \
MACRO(NAME ## _lowercase, <&macro_tap &kp FIRST_LETTER &kp SECOND_LETTER>); \
MACRO(NAME ## _sentence_case, <&macro_tap &kp LS(FIRST_LETTER) &kp SECOND_LETTER>); \
SHIFTED(NAME, & ## NAME ## _lowercase, & ## NAME ## _sentence_case)


SHIFTED(symbols_RPU, &kp SINGLE_QUOTE, &kp EXCLAMATION);
SHIFTED(symbols_RRU, &kp DOUBLE_QUOTES, &kp QUESTION);
SHIFTED(symbols_RMU, &kp SLASH, &kp ASTERISK);
SHIFTED(symbols_RIU, &kp PERIOD, &kp AMPERSAND);
SHIFTED(symbols_RIUI, &kp SEMICOLON, &kp COLON);
SHIFTED(symbols_RIHI, &kp COMMA, &kp PIPE);
SHIFTED(symbols_RILI, &kp MINUS, &kp PLUS);

SHIFTED(bspc_del, &kp BSPC, &kp DEL);

COMBO(z, BASE, LPL LRL, &kp Z);

BIGRAM(qu, Q, U);
MACRO(q_hold_tap_workaround, <&macro_tap &kp Q>);
HOLD_TAP(q_qu_hold_tap, &q_hold_tap_workaround, &qu);
COMBO(qu, BASE, RPL RRL, &q_qu_hold_tap 0 0);

BIGRAM(th, T, H);
COMBO(th, BASE, LIH LMH, &th);

BIGRAM(ch, C, H);
COMBO(ch, BASE, LIL LML, &ch);

BIGRAM(sh, S, H);
COMBO(sh, BASE, LRH LMH, &sh);

BIGRAM(wh, W, H);
COMBO(wh, BASE, RRH RPH, &wh);

BIGRAM(gh, G, H);
COMBO(gh, BASE, LRU LMU, &gh);

BIGRAM(ph, P, H);
COMBO(ph, BASE, LMU LIU, &ph);

/ {
    behaviors {
        lmt: lmt {
            compatible = "zmk,behavior-hold-tap";
            label = "lmt";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <R_INDEX_FINGER R_MIDDLE_FINGER R_RING_FINGER R_PINKY_FINGER R_THUMB>;
            hold-trigger-on-release;
        };

        rmt: rmt {
            compatible = "zmk,behavior-hold-tap";
            label = "rmt";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            global-quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <L_INDEX_FINGER L_MIDDLE_FINGER L_RING_FINGER L_PINKY_FINGER L_THUMB>;
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        BASE_layer {
            bindings = <
//    ┌──────────────┬─────────────┬──────────────┬───────────────┬───────┐                       ┌───────────────┬───────────────┬──────────────┬──────────────┬──────────────┐
//    │    &kp J     │    &kp G    │    &kp M     │     &kp P     │ &kp V │                       │ &symbols_RIUI │ &symbols_RIU  │ &symbols_RMU │ &symbols_RRU │ &symbols_RPU │
//    ├──────────────┼─────────────┼──────────────┼───────────────┼───────┤                       ├───────────────┼───────────────┼──────────────┼──────────────┼──────────────┤
//    │ &lmt LMETA R │ &lmt LALT S │ &lmt LCTRL N │ &lmt LSHIFT D │ &kp B │                       │ &symbols_RIHI │ &rmt RSHIFT A │ &rmt RCTRL E │ &rmt RALT I  │ &rmt RMETA H │
//    ├──────────────┼─────────────┼──────────────┼───────────────┼───────┤                       ├───────────────┼───────────────┼──────────────┼──────────────┼──────────────┤
//    │    &kp X     │    &kp F    │    &kp L     │     &kp C     │ &kp W │                       │ &symbols_RILI │     &kp U     │    &kp O     │    &kp Y     │    &kp K     │
//    └──────────────┴─────────────┴──────────────┼───────────────┼───────┼─────────┐   ┌─────────┼───────────────┼───────────────┼──────────────┴──────────────┴──────────────┘
//                                                │   &bspc_del   │ &kp T │ &kp TAB │   │ &kp RET │   &kp SPACE   │  &lt SYS ESC  │                                             
//                                                └───────────────┴───────┴─────────┘   └─────────┴───────────────┴───────────────┘                                             
  &kp J          &kp G         &kp M          &kp P           &kp V                           &symbols_RIUI   &symbols_RIU    &symbols_RMU   &symbols_RRU   &symbols_RPU
  &lmt LMETA R   &lmt LALT S   &lmt LCTRL N   &lmt LSHIFT D   &kp B                           &symbols_RIHI   &rmt RSHIFT A   &rmt RCTRL E   &rmt RALT I    &rmt RMETA H
  &kp X          &kp F         &kp L          &kp C           &kp W                           &symbols_RILI   &kp U           &kp O          &kp Y          &kp K       
                                              &bspc_del       &kp T   &kp TAB       &kp RET   &kp SPACE       &lt SYS ESC                                               
            >;
        };
        SYS_layer {
            bindings = <
//    ┌──────────────┬───────────────────┬──────────────────┬──────────────┬──────────────┐                   ┌───────┬───────┬───────┬───────┬───────┐
//    │  &bt BT_CLR  │ &ext_power EP_OFF │ &ext_power EP_ON │ &out OUT_USB │ &out OUT_BLE │                   │ &none │ &none │ &none │ &none │ &none │
//    ├──────────────┼───────────────────┼──────────────────┼──────────────┼──────────────┤                   ├───────┼───────┼───────┼───────┼───────┤
//    │ &bt BT_SEL 4 │   &bt BT_SEL 3    │   &bt BT_SEL 2   │ &bt BT_SEL 1 │ &bt BT_SEL 0 │                   │ &none │ &none │ &none │ &none │ &none │
//    ├──────────────┼───────────────────┼──────────────────┼──────────────┼──────────────┤                   ├───────┼───────┼───────┼───────┼───────┤
//    │    &none     │       &none       │      &none       │    &none     │    &none     │                   │ &none │ &none │ &none │ &none │ &none │
//    └──────────────┴───────────────────┴──────────────────┼──────────────┼──────────────┼───────┐   ┌───────┼───────┼───────┼───────┴───────┴───────┘
//                                                          │    &none     │    &none     │ &none │   │ &none │ &none │ &none │                        
//                                                          └──────────────┴──────────────┴───────┘   └───────┴───────┴───────┘                        
  &bt BT_CLR     &ext_power EP_OFF   &ext_power EP_ON   &out OUT_USB   &out OUT_BLE                       &none   &none   &none   &none   &none
  &bt BT_SEL 4   &bt BT_SEL 3        &bt BT_SEL 2       &bt BT_SEL 1   &bt BT_SEL 0                       &none   &none   &none   &none   &none
  &none          &none               &none              &none          &none                              &none   &none   &none   &none   &none
                                                        &none          &none          &none       &none   &none   &none                        
            >;
        };
    };
};
